package 평가1_서술형;
// 1. 변수명 짓기 : 대소문자, 특수문자( _ , $만 가능), 숫자 가능(앞에 오면 안됨)
// 예약어 사용하면 안됨, 이름 사이에 공백이 오면 안됨, 길이제한 없음
// 복합명사 사용시 (여러단어를 섞어쓸 때) 소문자, 다음에 오는 단어부터는 대문자(camel 표기법)
// 사용목적에 맞게끔 이름을 지어야함

// 2. 변수 선언 시 사용되는 자료형별 메모리 할당 크기 확인

// 3. 변수란?? "하나"의 "값"을 "저장"하기 위한 "공간"

// 4. 기본 자료형 변수와 참조 자료형 변수의 차이점

// 5. 상수란? 한번만 값을 저장할 수 있는 변수

// 6. 문자열을 담는 변수를 만들고 문자열 대입하기 (String str = "Java";)

// 7. 자동 형 변환(묵시적 형 변환) : 데이터 타입이 다른 경우 유리한 방향(즉, 작은 것과 큰 것이 있을 때 큰 쪽으로 맞춤)
// 정수와 실수가 있으면 실수로!

// 8. 강제 형 변환(의도적 형 변환) : 값의 범위가 큰 것에서 작은 것으로 변경할 때.. ㅠㅠㅠ
// 강사님 정답 -> 개발자가 의도를 가지고 변경하는 것

// 9. 단항연산자 : !(현재값을 부정), ++(변수값을 1증가), --(변수값을 1감소), +34, -34, ~(비트 부호를 반전시킴)

// 10. 다항연산자 : 산술연산자(+, -, *, /, %), 비교연산자(>, >, >=, <=, !=, ==),
// 논리연산자(&&, ||), 비트연산자(&(둘다 1이면 1), |(둘 중 하나만 1이면 1), ^(xor 값이 다르면 1)

// 11. 산술연산자에서 각 연산자의 의미 (+ : 더한 값을 반환, - : 뺀 값을 반환,
// * : 곱한 값을 반환, / : 나눈 값을 반환, % : 나눈 나머지를 반환)

// 12. 단항연산자 중 ++, -- 기능 설명
// 증감연산자(변수의 값을 1을 더하거나 1을 뺀다.

// 13. 논리연산자(&& , ||, !) 설명
// &&(AND) : 둘 다 참이어야 참, ||(OR) : 둘 중 하나만 참이면 참

// 14. 전위 연산자 : 먼저 값을 증가하고 대입이 이루어짐, 후위 연산자 : 대입하고 증가가 이루어짐

// 15. 관계연산자 확인 문제

// 16. 연산 결과가 논리 값(true, false)이 나오는 연산자를 네 가지 쓰시오. (논리/비교연산자 전부)
// (<, !=, ==, &&, ||, >=, <=)

// 17. 연산자 우선 순위 기술 [산술연산자, 삼항연산자, 논리연산자, 최우선연산자, 대입연산자]
//     => 최우선연산자 () -> 산술연산자 -> 논리연산자 -> 삼항연산자 -> 대입연산자

// 18. 삼항연산자 설명 : 조건식에서 참과 거짓만 있는 경우 삼항연산자로 표현 가능
// (조건식) ? 참인 경우 : 거짓인 경우 수행;

// 19. 조건문의 종류를 쓰시오. (if, switch, 삼항연산자)

// 20. 반복문의 종류를 쓰시오. (for, while, do-while, 향상된 for문)

// 21. if(조건식) : 논리와 값
// 실제 사용되는 형태를 기술해도 정답 :값, 비교연산자, 논리연산자, 비교연산자를 통한 값의 범위

// 22. switch(값) : 정수, 문자, 문자열

// 23. 코딩 결과 확인 문제 : 1 ~ 5까지 수행하는 반복문

// 24. 코딩 결과 확인 문제 : 구구단 출력 문제(2단만 출력), for문의 반복 수행 범위 확인

public class Test1Main {
    public static void main(String[] args) {
        // ---------------------------------
        // 1번 문제 :
//        double taxRate = 0.10;
//        int _________DDDDD;
//        int ___$$$1234;
//
//        // 안되는 예
//        int switch; // 예약어는 안됨

        //------------------------------------

        // 2번 문제 :
        // boolean은 몇 Byte? 1Byte! char는 몇 Byte? 2Byte!
        // byte는 1Byte! short는 2Byte! int는 4Byte! long은 8Byte!
        // float는 4Byte! double 8Byte!

        // String은 참조형이기 때문에 없음(크기를 알 수가 없음)

//        boolean isTrue = true; // boolean 타입 : 참과 거짓 판별용, 1Byte, 기본값은 false
//        char ch = '여'; // 1개의 문자를 저장하기 위한 공간, 2Byte, 양수만 존재
//        // 정수 타입
//        byte bt = 128; // 1Byte 정수 타입의 자료형(-128 ~ 127 : 음수 표기도 가능)
//        short st = 32000; // 2Byte 정수 타입의 자료형(-32xxx ~ 32xxx)
//        int it = 210000000; // 4Byte 정수 타입의 자료형(-21억 ~ 21억)
//        long lt = 3400000000000000000L; // 8Byte 정수 타입(대략 -450경 ~ 450경)
//        // 실수 타입
//        float ft = 3.14f; // 4Byte 실수형(소수점 이하가 있음)
//        double dt = 3.14; // 8Byte 실수형

        //------------------------------------------

        // 3번 문제 :
        // 변수란?? "하나"의 "값"을 "저장"하기 위한 "공간"

//        int x = 100; // 100이라는 값을 저장하기 위해 4Byte 정수 타입의 공간을 할당하고 값을 대입

        //------------------------------------------

        // 4번 문제 :
        // 기본 자료형 : 실제 자료형에 "값을 저장"하는 것(boolean, byte, char, int...........)
        // 소문자는 기본 자료형, 대문자는 참조 자료형
        // 참조 자료형 : 실제 값을 저장하지 않고 "값이 있는 주소를 저장"함(String, 배열, 객체)

        //------------------------------------------

        // 5번 문제 :
        // 상수란? 한번만 값을 저장할 수 있는 변수 (예: final 키워드 사용)

//        final double PI = 3.14; // final 키워드 사용으로 상수로 만듦
//        double PI_1 = PI; // 이건 값을 읽어서 대입하는 것이기 때문에 가능하다.

        //------------------------------------------

        // 6번 문제 :
        // 문자열을 담는 변수를 만들고 문자열 대입하기

//        String str = "Java"; // 문자열을 저장하는 데이터 타입은 String

        //------------------------------------------

        // 7번 문제 :
        // 자동 형 변환(묵시적 형 변환) : 데이터 타입이 다른 경우 유리한 방향(즉, 작은 것과 큰 것이 있을 때 큰 쪽으로 맞춤)

//        double avr = (98 + 56 + 78)/3.00;
//        System.out.println(avr);

        //------------------------------------------

        // 8번 문제 :
        // 강제 형 변환(의도적 형 변환) : 값의 범위가 큰 것에서 작은 것으로 변경할 때.. ㅠㅠㅠ
        // double avr = (double)(100+34+78)/3; // -> 강사님 정답 -> 개발자가 의도를 가지고 변경 하는 것

//        int avr = 3.14; // 에러난다.
//        int avr1 = (int)3.14; // 실수 -> 정수 강제 형 변환
//        int avr2 = (int)3000000000L; // 롱타입 -> 인트타입 강제 형 변환

        //------------------------------------------

        // 9번 문제 :
        // 단항연산자 : !(Not), ++(변수값을 1증가), --(변수값을 1감소), +34, -34, ~(비트 부호를 반전시킴)


//        boolean isTrue = false;
//        if(!isTrue)
//
//        for(int i = 0; i < 10; i++)
//
//        int num = 10;
//        System.out.println(~num);

        //------------------------------------------

        // 10번 문제 :
        // 다항연산자 : 산술연산자(+, -, *, /, %), 비교연산자(>, >, >=, <=, !=, ==),
        // 논리연산자(&&, ||), 비트연산자(&(둘다 1이면 1), |(둘 중 하나만 1이면 1), ^(xor 값이 다르면 1)

//        int num1 = 10, num2 = 20;
//        int sum = num1++ + ++num2 + -num2; // 상황에 따라 단항, 다항(산술)연산자, 부호가 될 수 있다.

        //------------------------------------------

        // 11번 문제 :
        // 산술연산자에서 각 연산자의 의미 (+ : 더한 값을 반환, - : 뺀 값을 반환,
        //// * : 곱한 값을 반환, / : 나눈 값을 반환, % : 나눈 나머지를 반환)

//        int sum = 10 + 5; // 더한 값을 sum에 반환

        //------------------------------------------

        // 12번 문제 :
        // 단항연산자 중 ++, -- 기능 설명
        // 증감연산자(변수의 값을 1을 더하거나 1을 뺀다.

//        int num = 10;
//        System.out.println(num++); // 후위 증가 연산자 (값 : 10)
//        System.out.println(++num); // 전위 증가 연산자 (값 : 11)

        //------------------------------------------

        // 13번 문제 :
        // 13. 논리연산자(&& , ||, !) 설명
        // &&(AND) : 둘 다 참이어야 참, ||(OR) : 둘 중 하나만 참이면 참

        //------------------------------------------

        // 14번 문제 :
        //전위 연산자 : 먼저 값을 증가하고 대입이 이루어짐, 후위 연산자 : 대입하고 증가가 이루어짐

//        int num = 10;
//        System.out.println(num++); // 후위 증가 연산자 (값 : 10)
//        System.out.println(++num); // 전위 증가 연산자 (값 : 11)

        //------------------------------------------

        // 15번 문제 :

//        boolean a = true;
//        boolean b = false;
//
//        System.out.println(a || b); // 둘 중 하나만 참이면 참 -> true
//        System.out.println(a && b); // 둘 다 참이어야 참 -> false
//        System.out.println(!(a && b)); // 괄호 내부 조건을 먼저 수행한 결과가 거짓이었고 !연산자로 결과가 바뀜 -> true

        //------------------------------------------

        // 16번 문제 :
        //연산 결과가 논리 값이 나오는 연산자를 네 가지 쓰시오. (논리/비교연산자 전부)
        // (<, !=, ==, &&, ||, >=, <=)

//        int x = 10;
//        int y = 20;
//        System.out.println(x < y); // true
//
//        int a = 10;
//        int b = 20;
//        System.out.println(a > 0 && a < b); // true

        //------------------------------------------

        // 17번 문제 :
        // 연산자 우선 순위 기술 [산술연산자, 삼항연산자, 논리연산자, 최우선연산자, 대입연산자]
        //     => 최우선연산자 () -> 산술연산자 -> 논리연산자 -> 삼항연산자 -> 대입연산자

//        int num1 = 10, num2 = 20;
//        System.out.println((num1 > 10) && (num1 < num2));

        //------------------------------------------

        // 18번 문제 :
        // 삼항연산자 설명 : 조건식에서 참과 거짓만 있는 경우 삼항연산자로 표현 가능
        // (조건식) ? 참인 경우 : 거짓인 경우 수행;


        //------------------------------------------

        // 19번 문제 :
        // 조건문의 종류를 쓰시오. (if, switch, 삼항연산자)


        //------------------------------------------

        // 20번 문제 :
        // 반복문의 종류를 쓰시오. (for, while, do-while, 향상된 for문)

        //------------------------------------------

        // 21번 문제 :
        // if(조건식) : 논리와 값
        // 실제 사용되는 형태를 기술해도 정답 :값, 비교연산자, 논리연산자, 비교연산자를 통한 값의 범위

        //------------------------------------------

        // 22번 문제 :
        // swich문 값에 넣을 수 있는 것?
        // switch(값) : 정수, 문자, 문자열

        //------------------------------------------

        // 23번 문제 :
        // 코딩 결과 확인 문제 : 1 ~ 5까지 수행하는 반복문

//        for(int i = 1; i <= 5; i++) { // 1 ~ 5 까지 수행
//            System.out.println(i + "*" + i + "=" + (i*i)); // 수행결과는? i * i = (i*i)
//            // 1*1=1
//            // 2*2=4
//            // 3*3=9
//            // 4*4=16
//            // 5*5=25
//        }

        //------------------------------------------

        // 24번 문제 :
        // 코딩 결과 확인 문제 : 구구단 출력 문제(2단만 출력), for문의 반복 수행 범위 확인

//        for(int i = 1; i < 10; i++) { // 여기서 묻는 문제는 반복문의 범위를 확인하는 문제임
//            System.out.println(2 + "*" + i + "=" + (2*i));
//        }

//        for(int i = 1; i <= 9; i++) { // 여기서 묻는 문제는 반복문의 범위를 확인하는 문제임
//            System.out.println(2 + "*" + i + "=" + (2*i));
//        }

        //------------------------------------------




    }
}
